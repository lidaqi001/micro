// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DemoService service

func NewDemoServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DemoService service

type DemoService interface {
	/// 问候服务接口1，通过客户端传入用户名返回对应的问候文本
	SayHello(ctx context.Context, in *DemoRequest, opts ...client.CallOption) (*DemoResponse, error)
	/// 问候服务接口2，根据客户端传入用户ID返回对应的问候文本
	SayHelloByUserId(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*DemoResponse, error)
}

type demoService struct {
	c    client.Client
	name string
}

func NewDemoService(name string, c client.Client) DemoService {
	return &demoService{
		c:    c,
		name: name,
	}
}

func (c *demoService) SayHello(ctx context.Context, in *DemoRequest, opts ...client.CallOption) (*DemoResponse, error) {
	req := c.c.NewRequest(c.name, "DemoService.SayHello", in)
	out := new(DemoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoService) SayHelloByUserId(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*DemoResponse, error) {
	req := c.c.NewRequest(c.name, "DemoService.SayHelloByUserId", in)
	out := new(DemoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DemoService service

type DemoServiceHandler interface {
	/// 问候服务接口1，通过客户端传入用户名返回对应的问候文本
	SayHello(context.Context, *DemoRequest, *DemoResponse) error
	/// 问候服务接口2，根据客户端传入用户ID返回对应的问候文本
	SayHelloByUserId(context.Context, *UserRequest, *DemoResponse) error
}

func RegisterDemoServiceHandler(s server.Server, hdlr DemoServiceHandler, opts ...server.HandlerOption) error {
	type demoService interface {
		SayHello(ctx context.Context, in *DemoRequest, out *DemoResponse) error
		SayHelloByUserId(ctx context.Context, in *UserRequest, out *DemoResponse) error
	}
	type DemoService struct {
		demoService
	}
	h := &demoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DemoService{h}, opts...))
}

type demoServiceHandler struct {
	DemoServiceHandler
}

func (h *demoServiceHandler) SayHello(ctx context.Context, in *DemoRequest, out *DemoResponse) error {
	return h.DemoServiceHandler.SayHello(ctx, in, out)
}

func (h *demoServiceHandler) SayHelloByUserId(ctx context.Context, in *UserRequest, out *DemoResponse) error {
	return h.DemoServiceHandler.SayHelloByUserId(ctx, in, out)
}
